function doGet(e) { 
  Logger.log(JSON.stringify(e));
  var result = 'Ok';
  if (e.parameter == 'undefined') {
    result = 'No Parameters';
  }
  else {
    var sheet_id = '1jD3KOcDE_jmun8fXuevSURW3ikRvw1UCqDeXmcmhP2Y'; 	// Spreadsheet ID.
    var sheet_name = "Sheet1";  // Sheet Name in Google Sheets.

    var sheet_open = SpreadsheetApp.openById(sheet_id);
    var sheet_target = sheet_open.getSheetByName(sheet_name);

    var newRow = sheet_target.getLastRow() + 1;

    var rowDataLog = [];

    var Data_for_I3;
    var Data_for_J3;
    var Data_for_K3;
    var Data_for_L3;
    var Data_for_M3;
    var Data_for_N3;
    var Data_for_O3;

    var Curr_Date = Utilities.formatDate(new Date(), "Africa/Johannesburg", 'dd/MM/yyyy');
    rowDataLog[0] = Curr_Date;  // Date will be written in column A (in the "DHT11 Sensor Data Logger" section).

    var Curr_Time = Utilities.formatDate(new Date(), "Africa/Johannesburg", 'HH:mm:ss');
    rowDataLog[1] = Curr_Time;  // Time will be written in column B (in the "DHT11 Sensor Data Logger" section).

    var sts_val = '';

    for (var param in e.parameter) {
      Logger.log('In for loop, param=' + param);
      var value = stripQuotes(e.parameter[param]);
      Logger.log(param + ':' + e.parameter[param]);
      switch (param) {
        case 'sts':
          sts_val = value;
          break;

        case 'ratio1':
          rowDataLog[2] = value;  // Sensor Reading Status will be written in column C (in the "DHT11 Sensor Data Logger" section).
          result += ', Ratio1 Written on column C';
          break;

        case 'ratio2':
          rowDataLog[3] = value;  // The temperature value will be written in column D (in the "DHT11 Sensor Data Logger" section).
          result += ', Ratio2 Written on column D';
          break;

        case 'lat':
          sheet_target.getRange('F2').setValue(value);
          result += ', Location Updated in cell F2';
          break;

        case 'long':
          // Update cell E3 with location1 value
          sheet_target.getRange('F3').setValue(value);
          result += ', Location1 Updated in cell F3';
          break;

        case 'ave':
          rowDataLog[4] = value;  // The temperature value will be written in column D (in the "DHT11 Sensor Data Logger" section).
          result += ', Ratio2 Written on column F';
          break;

         case 'pulse':
          sheet_target.getRange('G2').setValue(value);
          result += ', Pulse Updated in cell G2';
          break;

        default:
          result += ", unsupported parameter";
      }
    }
    
    // Conditions for writing data received from ESP32 to Google Sheets.
   if (sts_val == 'write') {
      Logger.log(JSON.stringify(rowDataLog));
      // Only write the row if we have at least ratio1 or ratio2 data
      if (rowDataLog.length > 2) {
        var newRangeDataLog = sheet_target.getRange(newRow, 1, 1, rowDataLog.length);
        newRangeDataLog.setValues([rowDataLog]);
      }
      return ContentService.createTextOutput(result);
    }
    
    // Conditions for sending data to ESP32 when ESP32 reads data from Google Sheets.
    if (sts_val == 'read') {
      // Use the line of code below if you want ESP32 to read data from columns I3 to O3 (Date,Time,Sensor Reading Status,Temperature,Humidity,Switch 1, Switch 2).
      // var all_Data = sheet_target.getRange('I3:O3').getDisplayValues();
      
      // Use the line of code below if you want ESP32 to read data from columns K3 to O3 (Sensor Reading Status,Temperature,Humidity,Switch 1, Switch 2).
      var all_Data = sheet_target.getRange('K3:O3').getValues();
      return ContentService.createTextOutput(all_Data);
    }
  }
}
function stripQuotes( value ) {
  return value.replace(/^["']|['"]$/g, "");
}

